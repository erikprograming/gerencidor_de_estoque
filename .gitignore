import tkinter as tk
from tkinter import messagebox, ttk
import sqlite3


# Configuração do banco de dados
def conectar_banco():
    conexao = sqlite3.connect("estoque.db")
    cursor = conexao.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS produtos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            quantidade INTEGER NOT NULL,
            preco REAL NOT NULL
        )
    """)
    conexao.commit()
    return conexao


# Funções
def carregar_produtos():
    for item in tree.get_children():
        tree.delete(item)
    cursor = conexao.cursor()
    cursor.execute("SELECT * FROM produtos")
    for row in cursor.fetchall():
        tree.insert("", "end", values=row)


def adicionar_produto():
    nome = entry_nome.get()
    quantidade = entry_quantidade.get()
    preco = entry_preco.get()
    if not nome or not quantidade or not preco:
        messagebox.showerror("Erro", "Todos os campos são obrigatórios!")
        return
    try:
        quantidade = int(quantidade)
        preco = float(preco)
    except ValueError:
        messagebox.showerror("Erro", "Quantidade e preço devem ser numéricos!")
        return
    cursor = conexao.cursor()
    cursor.execute("INSERT INTO produtos (nome, quantidade, preco) VALUES (?, ?, ?)", (nome, quantidade, preco))
    conexao.commit()
    carregar_produtos()
    entry_nome.delete(0, tk.END)
    entry_quantidade.delete(0, tk.END)
    entry_preco.delete(0, tk.END)


def atualizar_produto():
    try:
        item_selecionado = tree.selection()[0]
        valores = tree.item(item_selecionado, "values")
        produto_id = valores[0]
    except IndexError:
        messagebox.showerror("Erro", "Selecione um produto para atualizar!")
        return

    nome = entry_nome.get()
    quantidade = entry_quantidade.get()
    preco = entry_preco.get()
    if not nome or not quantidade or not preco:
        messagebox.showerror("Erro", "Todos os campos são obrigatórios!")
        return
    try:
        quantidade = int(quantidade)
        preco = float(preco)
    except ValueError:
        messagebox.showerror("Erro", "Quantidade e preço devem ser numéricos!")
        return

    cursor = conexao.cursor()
    cursor.execute("UPDATE produtos SET nome = ?, quantidade = ?, preco = ? WHERE id = ?", (nome, quantidade, preco, produto_id))
    conexao.commit()
    carregar_produtos()
    entry_nome.delete(0, tk.END)
    entry_quantidade.delete(0, tk.END)
    entry_preco.delete(0, tk.END)


def excluir_produto():
    try:
        item_selecionado = tree.selection()[0]
        valores = tree.item(item_selecionado, "values")
        produto_id = valores[0]
    except IndexError:
        messagebox.showerror("Erro", "Selecione um produto para excluir!")
        return
    cursor = conexao.cursor()
    cursor.execute("DELETE FROM produtos WHERE id = ?", (produto_id,))
    conexao.commit()
    carregar_produtos()


# Interface Gráfica
conexao = conectar_banco()
janela = tk.Tk()
janela.title("Gerenciador de Estoque")
janela.geometry("700x500")
janela.configure(bg="#f7f7f7")

# Estilo geral
estilo = ttk.Style()
estilo.theme_use("clam")
estilo.configure("Treeview", background="#ffffff", foreground="#000000", rowheight=25, fieldbackground="#f7f7f7")
estilo.map("Treeview", background=[("selected", "#34a853")])

# Título
frame_titulo = tk.Frame(janela, bg="#f7f7f7")
frame_titulo.pack(pady=10)

titulo = tk.Label(frame_titulo, text="Gerenciador de Estoque", font=("Helvetica", 18, "bold"), bg="#f7f7f7", fg="#333")
titulo.pack()

# Entradas
frame_entrada = tk.Frame(janela, bg="#f7f7f7")
frame_entrada.pack(pady=10)

tk.Label(frame_entrada, text="Nome:", font=("Helvetica", 12), bg="#f7f7f7").grid(row=0, column=0, padx=5, pady=5, sticky="e")
entry_nome = tk.Entry(frame_entrada, font=("Helvetica", 12))
entry_nome.grid(row=0, column=1, padx=5, pady=5)

tk.Label(frame_entrada, text="Quantidade:", font=("Helvetica", 12), bg="#f7f7f7").grid(row=1, column=0, padx=5, pady=5, sticky="e")
entry_quantidade = tk.Entry(frame_entrada, font=("Helvetica", 12))
entry_quantidade.grid(row=1, column=1, padx=5, pady=5)

tk.Label(frame_entrada, text="Preço:", font=("Helvetica", 12), bg="#f7f7f7").grid(row=2, column=0, padx=5, pady=5, sticky="e")
entry_preco = tk.Entry(frame_entrada, font=("Helvetica", 12))
entry_preco.grid(row=2, column=1, padx=5, pady=5)

# Botões
frame_botoes = tk.Frame(janela, bg="#f7f7f7")
frame_botoes.pack(pady=10)

botao_adicionar = tk.Button(frame_botoes, text="Adicionar", command=adicionar_produto, bg="#34a853", fg="white", font=("Helvetica", 12), width=10)
botao_adicionar.grid(row=0, column=0, padx=5, pady=5)

botao_atualizar = tk.Button(frame_botoes, text="Atualizar", command=atualizar_produto, bg="#fbbc05", fg="white", font=("Helvetica", 12), width=10)
botao_atualizar.grid(row=0, column=1, padx=5, pady=5)

botao_excluir = tk.Button(frame_botoes, text="Excluir", command=excluir_produto, bg="#ea4335", fg="white", font=("Helvetica", 12), width=10)
botao_excluir.grid(row=0, column=2, padx=5, pady=5)

# Tabela
frame_tabela = tk.Frame(janela, bg="#f7f7f7")
frame_tabela.pack(pady=10, fill="both", expand=True)

colunas = ("ID", "Nome", "Quantidade", "Preço")
tree = ttk.Treeview(frame_tabela, columns=colunas, show="headings", selectmode="browse")
tree.heading("ID", text="ID")
tree.heading("Nome", text="Nome")
tree.heading("Quantidade", text="Quantidade")
tree.heading("Preço", text="Preço")

tree.column("ID", anchor="center", width=50)
tree.column("Nome", anchor="w", width=200)
tree.column("Quantidade", anchor="center", width=100)
tree.column("Preço", anchor="center", width=100)

scrollbar = ttk.Scrollbar(frame_tabela, orient="vertical", command=tree.yview)
tree.configure(yscroll=scrollbar.set)
scrollbar.pack(side="right", fill="y")
tree.pack(fill="both", expand=True)

# Carregar produtos ao iniciar
carregar_produtos()

# Loop da interface
janela.mainloop()
conexao.close()
